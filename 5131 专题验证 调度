队列调度是拥塞管理机制，在出接口发生拥塞时，通过适当的队列调度机制，选择某个队列优先服务。
1	常见BUG
1、	RR调度：调度不公平
	案例：8个channel进行RR调度，成功调度出一个channel的命令后，在下一个cycle 8个通道均不满足调度条件，状态机跳回idle状态，而不是跳到下一个状态，若在第二个cycle 通道1，通道2，通道3同时有效，当前实现通道1调度的概率比通道2要大，正确的做法为8个通道均不满足调度条件的情况下，跳转到下一个channel，这样才能保证每个通道调度概率一样公平。
2、	WRR调度相关：
案例：模块例化WRR调度器时，权重与端口的对应关系错误，端口无法获得预期权重。
案例：调取器使能信号拉低时，端口的动态权重计数值没有冻结，仍然在计数。
3、	WFQ：出现反压时调度不公平
	案例：当出现link级反压时，WFQ调度器出口被阻塞，如果WFQ调度器继续更新权重或复位为权重的初始值，当反压撤离时调度器的公平性没有得到保证；出现link级反压时，整个调度器保持当前权重值，停止刷新。
2	验证目标
2.1	针对调度器本身(微观角度)
从微观上看需要保证调度算法的实现与预期一致：
SP+RR调度器：
	调度器是否能够正确复位：复位时调度指针是否归0等
	是否能够正确配置：SP权限是否能够分配给任何一个端口，是否可以不分配SP权限，是否可以把SP功能关闭；如果允许动态配置，在工作过程中改变SP的配置，输出是否按照新的配置进行。
	各种情况下的调度结果是否正确：有一个源/两个源/多个源参与调度的情况；有一个源/两个源/多个源有请求的情况；请求源数量动态增加或减少的情况；以上两种情况与任意源为SP的组合；频繁切换sch_en的情况。
	完成一次调度需要的时间是否符合预期：fp1、fp2或fp4等，fp1时是否每拍都有请求输入时，每拍都能有调度结果。
WRR调度器：
	是否能够正确复位：复位时调度指针是否归0，动态权重是否清0等
	权重是否能够正确配置：MPI是否能够正确访问调度器的配置寄存器，配置寄存器的值到调度器的配置传递是否正确；如果允许动态配置，在工作过程中改变各请求源的配置权重，输出是否按照新的配置进行。
	权重的刷新情况是否符合预期：有三种情况会刷新各请求源的权重：所有请求源的权重计数器为0；所有端口都无请求；所有权重计数器大于0的端口都无请求。另一种组合，所有有请求的端口对应的权重计数器都为0的情况，RTL实现时不会出现，会在之前的一拍更新权重。
 
	各请求源动态权重的维护是否准确：权重的维护涉及多种情况：某个源被调度一次后其动态权重会减1，而其它源的调度权重不会改变；某个源有申请，但其动态权重为0，则无法获得调度机会，其动态权重值会保持为0直到下一次刷新；某个源调度一次后，如果满足刷新条件，则所有源的动态权重都被刷新为配置值；在schedule_en信号为0时，所有源的动态权重值要保持不变。
 
	各种情况下的调度结果是否正确：有一个源/两个源/多个源参与调度的情况；有一个源/两个源/多个源有请求的情况；有一个源/两个源/多个源有动态权重的情况；请求源数量动态增加或减少的情况；极限权重配置和随机权重配置的情况；某个源的权重配置为0时调度器是否能够正常工作，并且在一轮调度结束前不会调度权重为0的源；频繁切换sch_en的情况。
	完成一次调度需要的时间是否符合预期：fp1、fp2或fp4等，fp1时是否每拍都有请求输入时，每拍都能有调度结果。
	可参考SVN文档库中WRR测试点分解：
SD5131SVN\1.ChipKey\02.Design\2.1DS\COMMON\WRR
2.2	针对使用调度器的设计模块(宏观角度)
从宏观看需要保证模块输出的总流量及各请求源输出流量符合预期
	调度器选择的正确性：是否最节省资源，是否能达到预期效果
	例化调度器时各信号线连接的正确性：各权重配置寄存器的值连接到调度器的接口信号时，是否对应准确；各请求源的连线是否对应正确；调度器输出信号是否连接到预期位置等
	调度器各输入信号产生的合理性：请求源的req信号使能是否正确(例如是否将请求源对应端口队列的非空信号和端口反压信号做与操作后作为req)；调度器工作使能信号schedule_en信号使能是否正确(例如是否将link反压和其它控制信号做与操作后作为schedule_en)
SP+RR调度器：
	流量无拥塞，各端口的输出流量与输入一致。
	流量拥塞，SP端口的输入和输出流量一致，其他端口对剩余流量按1：1进行划分(如果SP端口的流量大于总出口带宽，则其他端口无流量输出)
	流量拥塞，SP端口的流量动态改变：当SP端口停流或者流量不足时，其它几个端口的流量能够按1：1的比例对剩余带宽进行划分；之后SP端口满流量且大于出口带宽，其它端口无流量输出。
	动态改变SP端口，动态开启或关闭SP功能，检查输出端口输出流量是否符合预期。
	在模块经常收到link级反压的情况下，各输出端口的流量(比例)是否仍然符合预期。
WRR调度器：
	流量无拥塞，各端口的输出流量与输入一致。
	流量拥塞，调度器的权重按不同的比例进行配置时，模块的各输出端口流量是否符合预期，比例是否符合预期，权重的典型比例配置包括0：1/1：1/1：2/1：max；相同比例但权重值不同看出口流量是否比例一致，例如1：1/max:max，1：2/2：4等相同比例。
	动态改变配置权重，各出口流量是否符合预期。
	在模块经常收到link级反压的情况下，各输出端口的流量是否仍然符合预期。
	模块是否做到Work-Conserving，即在调度器及周围逻辑的配合下，当一个端口停流或者流量不足时，其它几个端口的流量能够按比例再对剩余带宽进行划分(例如端口分为高速端口和低速端口，当高速端口无流量或流量不足时，低速端口是否可以输出比配置比例更多的流量)；相反如果之前没有流量的端口有流量输入，各请求源的输出流量仍要符合配置的权重比例。
	如果模块为对不同长度包的处理模块，使用了DRR/DWRR等调度器，要做到任意包长、随机包长的情况下，各个流的比例都要正确。
3	验证方法
3.1	针对调度器本身(单独验证调度器)
SP+RR调度器：
1、	复位检查：
	复位逻辑，assertion检查复位后调度器中的指针是否指到0
2、	配置值检查：
	调度器接口输入的SP端口选择是否能正确对应到预期请求源
	检查：结合功能性用例和check波形
3、	调度正确性检查：
	激励：请求源有效的数量随机、SP端口随机选择、SP功能是否开启随机、调度器使能0、1之间不断变化
	检查：针对调度器写一个检查环境，每个调度周期都将调度器的输出与环境中RM的输出进行比较。
	覆盖：assertion覆盖有一个/两个/多个源有权重；有一个/两个/多个源有请求；各请求源为SP端口；SP功能关闭/打开；调度器使能/不使能/使能不使能连续；以上情况的cross

	激励：频繁长时间关闭调度器；频繁长短间隔关闭调度器；频繁短时间关闭调度器
	检查：assertion/checker检查调度器输出是否正确

	激励：频繁长时间多个请求源有请求；频繁长短间隔多个请求源有请求；频繁段时间多个请求源有请求
	检查：assertion/checker检查调度器输出是否正确

	激励：动态改变调度器的SP端口配置、动态打开或关闭SP功能
	检查：assertion/checker检查调度器输出是否正确
WRR调度器：
1、	复位检查：
	复位逻辑，assertion检查复位后调度器中的指针是否指到0，动态权重值是否为0。
2、	配置值检查：
	调度器接口输入的权重值是否能够正确对应到各请求源
	检查：可结合功能性用例和check波形。
3、	调度正确性检查：
	激励：请求源有效的数量随机、各请求源权重配置随机、调度器使能0、1之间不断变化
	检查：针对调度器写一个检查环境，每个调度周期都将调度器的输出与环境中RM的输出进行比较。
	覆盖：assertion覆盖有一个/两个/多个源有权重；覆盖有一个/两个/多个源有请求；覆盖全部权重配置值；覆盖调度器使能/不使能/使能不使能连续；以上情况的cross

	激励：频繁长时间关闭调度器；频繁长短间隔关闭调度器；频繁短时间关闭调度器
	检查：assertion/checker检查调度器输出是否正确

	激励：频繁长时间多个请求源有请求；频繁长短间隔多个请求源有请求；频繁段时间多个请求源有请求
	检查：assertion/checker检查调度器输出是否正确

	激励：将两个请求源的权重配置为1：MAX；将多个请求源的权重配置为1：1：MAX：MAX
	检查：assertion/checker检查调度器输出是否正确

	激励：动态改变调度器权重
	检查：assertion/checker检查调度器输出是否正确
3.2	针对使用调度器的设计模块(不单独验证调度器)
SP+RR调度：
1、	复位检查：
	复位逻辑，assertion检查复位后调度器中的指针是否指到0
2、	配置值检查：
	MPI配置SP对应的端口，通过check波形，检查调度器中SP端口是否与配置一致，确认配置与源的对应正确。
3、	调度正确性检查：
	激励：模块入口发不同速率、不同包长(各个流包字节相同、字节不同；一个流为全大包，另一流为全小包；各个流全是混合包等各种场景进行遍历)(包处理模块包含此条件)、对应不同调度源的数据
	检查：例化调度assertion检查模块，将模块内部调度器的输入/输出信号连接到检查模块
	覆盖：assertion覆盖有一个/两个/多个端口有请求；配置为SP的端口有/无请求；覆盖调度器使能/不使能/使能不使能连续；以上情况的cross

	激励：流量不拥塞
	检查：流量统计模型在模块出口处统计各端口的流量，检查各端口的输出流量是否与输入流量一致。

	激励：流量拥塞，SP端口无流量/正常流量/满流量交替
	检查：在模块出口处统计各端口的流量，当SP端口满流量时，其他端口的流量很小或没有；当SP端口为正常流量，其他端口的流量比例为1：1；当SP端口无流量时，其他端口的流量比例为1：1，且总流量与出口带宽一致。

	激励：入口流量拥塞，模块出口link反压遍历如下场景：频繁长时间link反压模块出口；频繁长短间隔link反压模块出口；频繁短时间link反压模块出口。
	检查：在模块出口处统计各端口的流量，检查各端口的输出流量是否符合预期比例。

	激励：入口流量拥塞，包长遍历如下场景：各个流包字节相同、字节不同；一个流为全大包，另一流为全小包；大权重发小包、小权重发大包等组合；各个流全是混合包(包处理模块包含此条件)。
	检查：在模块出口处统计各端口的流量，检查各端口的输出流量是否符合预期比例。

	激励：入口流量拥塞，发包一段时间后随机反压住一条发送流，停止发送该流的包；一段时间后重新发送该流的包。
	检查：在模块出口处统计各端口的流量，检查各端口的输出流量是否符合预期比例。

	激励：入口流量拥塞，发包前随机压住一条流，不发送该流的包；一段时间后发送该流的包。
WRR调度器：
1、	复位检查：
	复位逻辑，assertion检查复位后调度器中的指针是否指到0，动态权重值是否为0。
2、	配置值检查：
	MPI配置各请求源的权重，通过check波形，检查调度器中各权重配置值是否与写入值一致，确认配置与源的对应正确。
3、	调度正确性检查：
	激励：模块入口发不同速率、不同包长(各个流包字节相同、字节不同；一个流为全大包，另一流为全小包；各个流全是混合包等各种场景进行遍历)(包处理模块包含此条件)、对应不同调度源的数据
	检查：例化调度assertion检查模块，将模块内部调度器的输入/输出信号连接到检查模块
	覆盖：assertion覆盖有一个/两个/多个端口有权重；覆盖有一个/两个/多个端口有请求；覆盖全部权重配置值；覆盖调度器使能/不使能/使能不使能连续；以上情况的cross

	激励：流量不拥塞，配置各流量的权重值为1：1/1：2/1：4/1：MAX等典型权重值
	检查：流量统计模型在模块出口处统计各端口的流量，检查各端口的输出流量是否与输入流量一致。

	激励：流量拥塞，配置各流量的权重值为1：1/1：2/1：4/1：MAX等典型权重值
	检查：在模块出口处统计各端口的流量，检查各端口的输出流量是否符合预期比例。

	激励：流量拥塞，配置各流量的权重值为1：1/MAX：MAX，1：2/2：4等比例相同但权重值不同的配置
	检查：在模块出口处统计各端口的流量，检查当权重配置值不同但比例相同时，各端口的输出流量比例是否相同。

	激励：流量拥塞，配置各流量的权重值为1：1/1：2/1：4/1：MAX等典型权重值，模块出口link反压遍历如下场景：频繁长时间link反压模块出口；频繁长短间隔link反压模块出口；频繁短时间link反压模块出口。
	检查：在模块出口处统计各端口的流量，检查各端口的输出流量是否符合预期比例。

	激励：流量拥塞，配置各流量的权重值为1：1/1：2/1：4/1：MAX等典型权重值，包长遍历如下场景：各个流包字节相同、字节不同；一个流为全大包，另一流为全小包；大权重发小包、小权重发大包等组合；各个流全是混合包(包处理模块包含此条件)。
	检查：在模块出口处统计各端口的流量，检查各端口的输出流量是否符合预期比例。

	激励：流量拥塞，配置各流量的权重值为1：1/1：2/1：4/1：MAX等典型权重值，发包一段时间后随机反压住一条发送流，停止发送该流的包；一段时间后重新发送该流的包。
	检查：在模块出口处统计各端口的流量，检查各端口的输出流量是否符合预期比例。

	激励：流量拥塞，配置各流量的权重值为1：1/1：2/1：4/1：MAX等典型权重值，发包前随机压住一条流，不发送该流的包；一段时间后发送该流的包。
	检查：在模块出口处统计各端口的流量，检查各端口的输出流量是否符合预期比例。
补充说明：
1、	如果模块的出入口带宽一致，入口打满流量，出口各端口比例不明显，可以通过如下方法检查比例(各方法的前提都是各输入端口对应的缓存很大，释放反压后能维持很长的拥塞时间，否则看不出调度的效果)：
	link反压模块出口一段时间，使各调度器的输入端口队列都有一定的积累后，释放link反压，检查释放的一段时间后，各端口的出口流量比例是否符合预期。
	用一定频率的link反压模拟出口带宽较小的情况
	编写一个速率模型，放置在模块出口，可配置模型的速率，当模块出口带宽大于配置值时，会收到模型的反压
2、	更细致的功能覆盖点可以考虑被调度队列和其他队列的关系(即当前获得调度机会的队列在下一个调度时刻仍然有请求、其他队列有/无请求)、队列状态的更新和调度动作的同时出现，这些实际上已经包含了对其他功能的验证
3、	在保证调度器本身功能正确的同时，需要验证的重点是在各种场景下，调度器可以发挥预期的作用，即在与其他逻辑的配合下，各请求源可以获得预期的流量。

4	实现参考
RR调度器：
1.	$VCS_HOME/packages/assert_arbiter
	例化该checker时，参数arbitration_rule选择1为RR调度；如果参数req_priority_chk选择为1，则参数req_priority中为1的bit对应的请求为SP请求；
	在RR调度时，如果req无请求，则grant不能保持上一次的结果，而应该为0，如果保持会报无req但产生请求的assertion错误。
	根据RTL中RR调度的实现不同，对req信号和grant信号进行处理后再连接到assert_arbiter的例化信号上：
   
2.	梁玉忠：mag_rr_assertion.sv
   blk_mag/harness/assertion/mag_rr_assertion.sv

SP+RR调度器：
1.	上述方法检查RR调度+断言检查SP：
         如果高优先级有请求，则被调度的一定是高优先级；如果被仲裁的不是高优先级，则
高优先级一定没有请求

WRR调度器：
1.	陈焱辉：wrr验证环境
   /home/c167406/wrr
2.	梁玉忠：mag_wrr_assertion.sv
      blk_mag/harness/assertion/mag_wrr_assertion.sv

流量统计和检查组件：
1.	袁苑：tm_traffic_stst.sv 、tm_traffic_chk.sv
sd_common/src/tm_traffic_stat.sv 、tm_traffic_chk.sv

实验举例：4个端口，0、1一组、4、5一组，组内RR调度，组间WRR调度，配置WRR调度的不同权重，包长80字节，模块入口及配合模块满带宽，实验结果：
权重配置 1：1，4个端口的出口流量比例为1：1：1：1
 
权重配置 7：7，4个端口的出口流量比例为1：1：1：1
 
权重配置 2：1，4个端口的出口流量比例为2：2：1：1
 
权重配置 4：2，4个端口的出口流量比例为2：2：1：1
 
权重配置 4：1，4个端口的出口流量比例为4：4：1：1
 
5	电路结构（可选）
  
http://hi3ms.huawei.com/hi/group/7501/thread_263319.html

